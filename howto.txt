Setting up the input files and run a pathway search
###################################################

KEGG data
---------
We do not provide any data from KEGG.

To build the network used, the user requires the raw text data entries from KEGG COMPOUND, REACTION, RPAIR and ENZYME, stored in a MATLAB map with the respective KEGG ID as key.
The data can be parsed with the function 
parseKEGGdata(compound_db, reaction_db, rpair_db, enzyme_db)
which generates the necessary parsed files for 
buildModelFromKEGG(reaction_map, compound_map, rpair_map, thermodynamics_raw_data, exclude_reactions)

eQuilibrator
------------
We do not provide any data from eQuilibrator.

the model building requires a tsv file with the columns
KEGGID    DeltaG0Prime 	 DeltaGUncertainty 	 DeltaGmPrime

required fields for the input file
----------------------------------

DATA_PATH: 					path to the folder containing the model files
RESULT_PATH 				path were the results are saved
RESULT_TARGET   			KEGG id of the target compound
GENERIC_METABOLITES 		name of the textfile containing the internal ids for generic metabolites
EXCLUDED_METABOLITES    	name of the textfile containing the internal ids for the excluded metabolites
COFACTORS					name of the textfile containing the internal ids for cofactors
START_METABOLITES			name of the textfile containing the internal ids for start metabolites
BASIS_METABOLITES   		name of the textfile containing the internal ids for basis metabolites
COMPOUNDS					name of the textfile containing the internal ids for all compounds in the model
REACTIONS					name of the textfile containing the internal ids for all reactions in the model
COMPOUND_NAMES				name of the textfile containing the names for all compounds
REACTION_NAMES				name of the textfile containing the names for all reactions
ARCS						name of the textfile containing the arcs
STOICHIOMETRIC_MATRIX		MATLAB matrix containing the stoichiometric matrix
TARGET_METABOLITE   		name of the target metabolite as stored in the model (in our case RESULT_TARGET[c])
REVERSIBLE_REACTIONS 		name of the textfile containing the reaction-reversible-reaction pair
KEGG_DATA_PATH				path to the KEGG data folder
REACTION_MAP         		MATLAB map containing the parsed KEGG REACTION entries
COMPOUND_MAP         		MATLAB map containing the parsed KEGG COMPOUND entries
ENZYME_MAP         			MATLAB map containing the parsed KEGG ENZYME entries
NON_ENZYMATIC_REACTIONS 	name of the textfile containing the ids of the non enzymatic reactions		
THERMODYNAMICS_MAP  		MATLAB map containing the parsed thermodynamic information computed with eQuilibrator
REVERSIBILITIES_MAP 		MATLAB map determining if a reaction is reversible

All files needed are automatically generated by a call from 
buildModelFromKEGG(reaction_map, compound_map, rpair_map, thermodynamics_raw_data, exclude_reactions)


for pathway search
------------------

* textfiles containing the internal ids for

	- compounds
	- reactions
	- start metabolites
	- basis metabolites
	- generic metabolites
	- excluded metabolites

	* matlab matrix with the stoichiometric matrix S (e.g. from COBRA toolbox), column and line indices have to match the order given in the compound and reaction textfile
	* textfile with two columns containing the internal id for a reaction in the first and the internal id for its reverse in the second column
	
* textfile containing the arcs:
	column1 : compound id substrate
	column2 : compound id product
	column3 : reaction id
	column4 : integer (in our case 1, could be used for weights in further versions)

	
run fsr(input_filename)
	
building the result data structure
----------------------------------

run buildResults(path, parameter_file)

path: path the result mat-files representing one pathway solution each
parameter file: mat file containing variables automatically created by the fsr call
	c: arcs 
	S: stoichiometric matrix
	T: target index
	rpair_reaction_map


filtering & side reactions
--------------------------
run filterResults(input_file, results) for filtering

and then findSideReactions(input_file, results) for finding side reactions


ranking
-------
run rankResults(input_file, results) 
with results being the result of the findSideReactions call